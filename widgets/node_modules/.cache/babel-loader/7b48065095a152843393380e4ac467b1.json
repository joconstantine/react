{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\react\\\\widgets\\\\src\\\\components\\\\Dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropdown = ({\n  options,\n  selected,\n  onSelectedChange,\n  label\n}) => {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const ref = useRef();\n  useEffect(() => {\n    const onBodyClick = event => {\n      if (ref.current.contains(event.target)) {\n        return; // if target is part of the dropdown, do not proceed\n      }\n\n      setOpen(false);\n    };\n\n    document.body.addEventListener('click', onBodyClick, {\n      capture: true\n    });\n    return () => {\n      document.body.removeEventListener('click', onBodyClick, {\n        capture: true\n      });\n    };\n  }, []);\n  const renderedOptions = options.map(option => {\n    if (option.value === selected.value) {\n      return null; // don't render\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item\",\n      onClick: () => onSelectedChange(option),\n      children: option.label\n    }, option.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"ui form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: \"Select a Color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setOpen(!open),\n        className: `ui selection dropdown ${open ? \"visible active\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"dropdown icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: selected.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `menu ${open ? \"visible transition\" : \"\"}`,\n          children: renderedOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"label\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: `${selected.value}`\n        },\n        children: [\"This text is \", selected.value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dropdown, \"wl9VvfhnMVWQ+kCekFjcRPEi3/0=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["D:/GitHub/react/widgets/src/components/Dropdown.js"],"names":["React","useState","useEffect","useRef","Dropdown","options","selected","onSelectedChange","label","open","setOpen","ref","onBodyClick","event","current","contains","target","document","body","addEventListener","capture","removeEventListener","renderedOptions","map","option","value","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA,gBAArB;AAAuCC,EAAAA;AAAvC,CAAD,KAAoD;AAAA;;AACjE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMU,GAAG,GAAGR,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,WAAW,GAAIC,KAAD,IAAW;AAC3B,UAAIF,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAAJ,EAAwC;AACpC,eADoC,CAC5B;AACX;;AAEDN,MAAAA,OAAO,CAAC,KAAD,CAAP;AACH,KAND;;AAOAO,IAAAA,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,EAAwCP,WAAxC,EAAqD;AAAEQ,MAAAA,OAAO,EAAE;AAAX,KAArD;AAEA,WAAO,MAAM;AACTH,MAAAA,QAAQ,CAACC,IAAT,CAAcG,mBAAd,CAAkC,OAAlC,EAA2CT,WAA3C,EAAwD;AAAEQ,QAAAA,OAAO,EAAE;AAAX,OAAxD;AACH,KAFD;AAGH,GAbQ,EAaN,EAbM,CAAT;AAeA,QAAME,eAAe,GAAGjB,OAAO,CAACkB,GAAR,CAAaC,MAAD,IAAY;AAC5C,QAAIA,MAAM,CAACC,KAAP,KAAiBnB,QAAQ,CAACmB,KAA9B,EAAqC;AACjC,aAAO,IAAP,CADiC,CACpB;AAChB;;AAED,wBACI;AAEI,MAAA,SAAS,EAAC,MAFd;AAGI,MAAA,OAAO,EAAE,MAAMlB,gBAAgB,CAACiB,MAAD,CAHnC;AAAA,gBAKKA,MAAM,CAAChB;AALZ,OACSgB,MAAM,CAACC,KADhB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH,GAduB,CAAxB;AAgBA,sBACI;AAAK,IAAA,GAAG,EAAEd,GAAV;AAAe,IAAA,SAAS,EAAC,SAAzB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACI;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,OAAO,EAAE,MAAMD,OAAO,CAAC,CAACD,IAAF,CAD1B;AAEI,QAAA,SAAS,EAAG,yBAAwBA,IAAI,GAAG,gBAAH,GAAsB,EAAG,EAFrE;AAAA,gCAII;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,oBAAuBH,QAAQ,CAACE;AAAhC;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAK,UAAA,SAAS,EAAG,QAAOC,IAAI,GAAG,oBAAH,GAA0B,EAAG,EAAzD;AAAA,oBACKa;AADL;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAcI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BACI;AAAG,QAAA,KAAK,EAAE;AAAEI,UAAAA,KAAK,EAAG,GAAEpB,QAAQ,CAACmB,KAAM;AAA3B,SAAV;AAAA,oCAAwDnB,QAAQ,CAACmB,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAvDD;;GAAMrB,Q;;KAAAA,Q;AAyDN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Dropdown = ({ options, selected, onSelectedChange, label }) => {\r\n    const [open, setOpen] = useState(false);\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        const onBodyClick = (event) => {\r\n            if (ref.current.contains(event.target)) {\r\n                return; // if target is part of the dropdown, do not proceed\r\n            }\r\n\r\n            setOpen(false);\r\n        };\r\n        document.body.addEventListener('click', onBodyClick, { capture: true });\r\n\r\n        return () => {\r\n            document.body.removeEventListener('click', onBodyClick, { capture: true });\r\n        }\r\n    }, [])\r\n\r\n    const renderedOptions = options.map((option) => {\r\n        if (option.value === selected.value) {\r\n            return null; // don't render\r\n        }\r\n\r\n        return (\r\n            <div\r\n                key={option.value}\r\n                className=\"item\"\r\n                onClick={() => onSelectedChange(option)}\r\n            >\r\n                {option.label}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div ref={ref} className=\"ui form\">\r\n            <div className=\"field\">\r\n                <label className=\"label\">Select a Color</label>\r\n                <div\r\n                    onClick={() => setOpen(!open)}\r\n                    className={`ui selection dropdown ${open ? \"visible active\" : \"\"}`}\r\n                >\r\n                    <i className=\"dropdown icon\"></i>\r\n                    <div className=\"text\">{selected.label}</div>\r\n                    <div className={`menu ${open ? \"visible transition\" : \"\"}`}>\r\n                        {renderedOptions}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"label\">\r\n                <p style={{ color: `${selected.value}` }}>This text is {selected.value}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dropdown;\r\n"]},"metadata":{},"sourceType":"module"}